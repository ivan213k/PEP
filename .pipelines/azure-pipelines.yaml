parameters:
- name: publishQaDatabase
  type: boolean
  default: False

trigger:
  branches:
    include:
    - master

pr:
  branches:
    include:
    - master

stages:
  - stage: build_and_test
    displayName: Build and Test

    jobs:
      - job: Build
        displayName: Build
        pool: Default
        variables:
        - group: telegram
        - group: agent-capabilities
        - group: sql-server

        steps:
          - checkout: self

          - task: DotNetCoreCLI@2
            displayName: Restore
            inputs:
              command: "restore"
              projects: "**/*.sln"

          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: "publish"
              projects: |
               $(System.DefaultWorkingDirectory)/PerformanceEvaluationPlatform/PerformanceEvaluationPlatform.csproj
              versioningScheme: byEnvVar
              versionEnvVar: GitVersion.SemVer
              arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release
              modifyOutputPath: false
              zipAfterPublish: false
              publishWebProjects: true

          - task: MSBuild@1
            displayName: Build SQL project
            inputs:
              solution: '**/*.sqlproj'
              configuration: release

          - script: |
              dotnet test PerformanceEvaluationPlatform.Tests.Integration/PerformanceEvaluationPlatform.Tests.Integration.csproj --logger trx --configuration Release
            displayName: Run Integration tests

          - task: PublishTestResults@2
            displayName: Publish test results
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/*.trx'
              failTaskOnFailedTests: true
              publishRunAttachments: true

          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: drop

          - task: CopyFiles@2
            displayName: Copy dacpack file
            inputs:
              contents: '$(System.DefaultWorkingDirectory)\PerformanceEvaluationPlatform.Database\bin\Release\**'
              targetFolder: $(Build.ArtifactStagingDirectory)
              flattenFolders: true

          - publish: $(Build.ArtifactStagingDirectory)\PerformanceEvaluationPlatform.Database.dacpac
            displayName: Publish dackpac as a pipeline artifact
            artifact: dacpac

          - script: |
              sqlpackage  /a:Publish /SourceFile:"$(System.DefaultWorkingDirectory)\PerformanceEvaluationPlatform.Database\bin\Release\PerformanceEvaluationPlatform.Database.dacpac" /TargetConnectionString:"$(intergationConnectionString)" /p:CreateNewDatabase=true
            displayName: Deploy integration database
            workingDirectory: $(sqlpackage)

          - task: SendTelegramNotification@0.1.0
            displayName: Send notification
            condition: failed()
            inputs:
              botToken: $(botToken)
              chats: $(chatsToNotify)
              message: Failed on branch <b>$(Build.SourceBranchName)</b> and commit <i>$(Build.SourceVersionMessage)</i>
              buildNumber: true
              buildQueuedBy: true
              releaseName: true

  - stage: deploy_to_qassss
    displayName: Deploy to QA
    dependsOn: build_and_test
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    jobs:
      - deployment: DeployToQA
        variables:
          - group: telegram
          - group: agent-capabilities
          - group: sql-server
        displayName: Deploy to QA
        environment: qa
        pool: default
        strategy:
          runOnce:
            deploy:
              steps:
              - checkout: self

              - download: current
                artifact: drop

              - download: current
                artifact: dacpac

              - script: |
                  sqlpackage  /a:Publish /SourceFile:"$(Pipeline.Workspace)\dacpac\PerformanceEvaluationPlatform.Database.dacpac" /TargetConnectionString:"$(qaConnectionString)" /p:CreateNewDatabase=true
                displayName: Deploy QA database
                workingDirectory: $(sqlpackage)
                condition: eq(${{ parameters.publishQaDatabase }}, True)
            
              - task: AzureWebApp@1
                inputs:
                  azureSubscription: PayAsYouGo
                  appName: pepWebAppQa
                  package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
